name: First action
on : [push]

env:
  SNAPSHOT_VERSION: ${{ format('{0}-SNAPSHOT', github.run_number) }}
  ACR_PATH: ${{ secrets.ACR_DEV_ENV_URL }}/hello-world

jobs:
    run-shell-command:
        runs-on: ubuntu-latest
        steps:
          - name: list of directory
            run: |
                 echo ${{ env.SNAPSHOT_VERSION }}
    build:
        runs-on: ubuntu-latest

        steps:
          - name: checkout
            uses: actions/checkout@v2
            with:
              fetch-depth: 0

          - name: Set up JDK
            uses: actions/setup-java@v1
            with:
              java-version: 8

          - name: Make gradlew executable
            run: chmod +x gradlew              

          - name: Build with Gradle
            id: build
            run: ./gradlew Build
          
          - name: Setup qemu-action
            uses: docker/setup-qemu-action@v2
 
          - name: Set up Docker Buildx
            uses: docker/setup-buildx-action@v2            

          - name: Docker login
            uses: azure/docker-login@v1
            with:
                login-server: ${{secrets.ACR_DEV_ENV_URL}}
                username: ${{ secrets.ACR_DEV_ENV_USERNAME }}
                password: ${{ secrets.ACR_DEV_ENV_PASSWORD }}

          - name: Build and push Docker Image
            run: |
                 echo Publishing to ACR
                 ls
                 pwd
                 docker build . -t $ACR_PATH:$SNAPSHOT_VERSION 
                 docker push $ACR_PATH:$SNAPSHOT_VERSION    

          # - name: Build and Push Docker Image
          #   uses: docker/build-push-action@v3
          #   with:
          #       registry:  ${{secrets.ACR_DEV_ENV_URL}}
          #       repository: hello-world
          #       username: ${{ secrets.ACR_DEV_ENV_USERNAME }}
          #       password: ${{ secrets.ACR_DEV_ENV_PASSWORD }}
          #       build_args: |
          #       tags: ${{ env.ACR_PATH }}:${{env.SNAPSHOT_VERSION}}


          - name: Get Token
            env:
                ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'
            run: |
                python -m pip install --upgrade pip
                pip install requests-oauthlib
                pip install Authlib
                echo ::set-output name=ACCESS_TOKEN::$(python -c 'from authlib.integrations.requests_client import OAuth2Session;
                session = OAuth2Session("${{ secrets.CLIENT_ID }}", "${{ secrets.CLIENT_SECRET }}")
                session.fetch_token("https://login.live.external.byp.ai/realms/Stratosphere/protocol/openid-connect/token")
                print(session.token["access_token"])')
            id: token

          - name: Delete Container Web
            run: |
                AUTH_HEADER="Authorization: Bearer ${{ steps.token.outputs.ACCESS_TOKEN }}"
                CONTAINER_WEB_NAME="process-orchestration"
                PROJECT_NAME="io-dev-test"
                REGION="us"
                STRASTOSPHERE_URL="https://api.live.external.byp.ai/geographies/$REGION/projects/$PROJECT_NAME/resources/container-web/$CONTAINER_WEB_NAME"
                curl --location --request DELETE $STRASTOSPHERE_URL \
                          --header "$AUTH_HEADER" \
                          --header 'Content-Type: application/json' \
                          --data-raw "$PAYLOAD"

          - name: Wait For Container To Delete
            run: sleep 30s
            shell: bash        

          - name: Create Container Web
            run: |
               AUTH_HEADER="Authorization: Bearer ${{ steps.token.outputs.ACCESS_TOKEN }}"
               CONTAINER_WEB_NAME="process-orchestration"
               PROJECT_NAME="io-dev-test"
               REGION="us"
               STRASTOSPHERE_URL="https://api.live.external.byp.ai/geographies/$REGION/projects/$PROJECT_NAME/resources/container-web/$CONTAINER_WEB_NAME"
               PAYLOAD='{
                     "spec": {
                       "liveness_probe": {
                         "failure_threshold": 3,
                         "initial_delay_seconds": 0,
                         "period_seconds": 10,
                         "path": "/actuator/health"
                       },
                       "resources": {
                         "cpu": 0.5,
                         "memory_mb": 8096,
                         "quality_of_service": "best-effort"
                       },
                       "autoscaling": {
                         "min_replicas": 1,
                         "max_replicas": 1
                       },
                       "authentication": {
                         "enabled": false
                       },
                       "http_requests": {
                         "timeout_seconds": 30
                       },
                       "files": {
                         "application.cfg": "key1=value1\nkey2=value2",
                         "config.json": "{\"some\": \"value\"}"
                       },
                       "enabled": true,
                       "image": "${{ env.ACR_PATH }}:${{ env.SNAPSHOT_VERSION }}",
                       "network": {
                         "access": "internal"
                       },
                       "observability": {
                         "uptime": {
                           "enabled": false
                         },
                         "metrics": {
                           "path": "/metrics",
                           "period_seconds": 30,
                           "enabled": false
                         },
                         "logs": {
                           "parse_json": false
                         },
                         "apm": {
                           "enabled": false
                         }
                       }
                     }
                   }'
               curl --location --request PUT $STRASTOSPHERE_URL \
               --header "$AUTH_HEADER" \
               --header 'Content-Type: application/json' \
               --data-raw "$PAYLOAD"  




